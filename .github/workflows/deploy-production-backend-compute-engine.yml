name: Deploy Backend to Compute Engine (Production)
on:
  push:
    branches:
      - production/backend/compute-engine

env:
  DEPLOY_DIRECTORY: /var/containers

jobs:
  deploy:
    strategy:
      max-parallel: 1
      matrix:
        services: [demo, info-collection-system, game-system, idc-system]
    continue-on-error: false
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: "actions/checkout@v3"

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin" # See 'Supported distributions' for available options
          java-version: "17"

      - name: Setup build environment and settings
        env: # Or as an environment variable
          POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
          POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
        run: |
          sudo apt-get install -y moreutils
          echo "Using GCP-specific application.yml"
          cd ${{ github.workspace }}/rigsg/${{ matrix.services }}/src/main/resources
          rm application.yml
          mv application_gcp.yml application.yml
          echo "Setting app_version and envsubst-ing app.yaml"
          cd ${{ github.workspace }}/rigsg
          APP_VERSION=$(git rev-parse --short HEAD)
          echo "app_version=$APP_VERSION" >> $GITHUB_ENV
          cd ${{ github.workspace }}/rigsg/${{ matrix.services }}/src/main/appengine
          envsubst < app.yaml | sponge app.yaml
          echo "Creating github_actions.json"
          cd ${{ github.workspace }}
          echo ${{ secrets.GCP_CREDENTIALS_JSON }} | base64 --decode > github_actions.json

      - name: Build Spring Boot application
        run: |
          cd ${{ github.workspace }}/rigsg
          ./mvnw --projects ${{ matrix.services }} --also-make clean package spring-boot:repackage \
          -D skipTests=true

      - name: Install SSH key of production server
        uses: shimataro/ssh-key-action@v2.5.1
        with:
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: "unnecessary"

      - name: Adding Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.PRODUCTION_SSH_HOST }} > ~/.ssh/known_hosts

      - name: Fix SSH key
        run: sed -i 's/\r$//g' ~/.ssh/id_rsa

      - name: Stop running Docker containers
        run: |
          ssh ${{ secrets.PRODUCTION_SSH_USERNAME }}@${{ secrets.PRODUCTION_HOST }} \
          " \
          cd $DEPLOY_DIRECTORY/${{ matrix.services }}/ && \
          sudo docker compose down \
          "

      - name: Delete old JAR files
        run: |
          ssh ${{ secrets.PRODUCTION_SSH_USERNAME }}@${{ secrets.PRODUCTION_HOST }} \
          " \
            cd $DEPLOY_DIRECTORY/${{ matrix.services }}/ && \
            rm -rf ./build \
          "

      - name: Upload JAR file to VM
        run: |
          rsync -avzb --delete ${{ github.workspace }}/rigsg/${{ matrix.services }}/target/${{ matrix.services }}.jar ${{ secrets.PRODUCTION_SSH_USERNAME }}@${{ secrets.PRODUCTION_SSH_HOST }}:$DEPLOY_DIRECTORY/${{ matrix.services }}/docker/volumes/${{ matrix.services }}/

      - name: Timestamping deployment
        run: |
          ssh ${{ secrets.PRODUCTION_SSH_USERNAME }}@${{ secrets.PRODUCTION_HOST }} \
          " \
            cd $DEPLOY_DIRECTORY/${{ matrix.services }}/ && \
            echo "Commit ${{ github.sha }} deployed at $(TZ=":Asia/Singapore" date)" > deployment_info.txt \
          "

